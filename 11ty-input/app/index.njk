<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>discover-mix</title>
    <link rel="stylesheet" href="/css/style.css"/>
    <meta name="description" content="Create big Spotify playlists based on your favourite genres"/>
  </head>
  <body>
    <h1>discover-mix</h1>
    <div class="wrapper" v-scope @vue:mounted="checkAuthThenGetTopGenres">
      <div v-if="authError" class="error-container">
        {% include 'auth-check-message.njk' %}
      </div>
      <div v-else class="main">
        <h2>1. Explore genres</h2>
        <p>
          Click '+ add' on the genres you're interested in. Click 'view in sidebar' to get an idea of what is in each genre. Click
          'explore similar' to get a list of similar genres.
        </p>
        <h3>Your top genres, based on your top artists</h3>
        <div v-if="topGenres.length > 0">
          <ul class="genres">
            <li v-for="genre in genresToShow" :class="{chosen: chosenGenres.includes(genre.name)}">
              <span class="genre-name">${genre.name}</span>
              <span class="artist-count" :title="`${genre.count} of your top artists`">${genre.count}Ã—</span>
              <button v-if="!(genre.name in similarGenres)" @click="getSimilarGenres(genre.name)">
                <span v-if="fetchingFor.includes(genre.name)">
                  finding similar...
                </span>
                <span v-else>ðŸŒŽ explore similar</span>
              </button>
              <button v-else @click="hideSimilarGenres(genre.name)">
                Ã— hide similar
              </button>
              <button class="toggle-button" @click="chosenGenres.push(genre.name)" v-if="!(chosenGenres.includes(genre.name))">
                + add
              </button>
              <button class="toggle-button" v-else @click="chosenGenres = chosenGenres.filter(g => g !== genre.name)">
                Ã— remove
              </button>
              <button @click="previewPlaylist(genre.soundPlaylistId)">
                ðŸ”Ž view in sidebar
              </button>
              <div class="similar-container" v-if="genre.name in similarGenres">
                <h4>similar to ${genre.name}</h4>
                <ul>
                  <li v-for="similarGenre in similarGenres[genre.name]" :class="{chosen: chosenGenres.includes(similarGenre.name)}">
                    <span class="genre-name">
                      ${similarGenre.name}
                    </span>
                    <span
                      class="artist-count"
                      v-if="topGenres.find(g => g.name === similarGenre.name)"
                      :title="`${topGenres.find(g => g.name === similarGenre.name).count} of your top artists`">
                      ${topGenres.find(g => g.name === similarGenre.name).count}Ã—</span>
                    <button @click="previewPlaylist(similarGenre.soundPlaylistId)">
                      view in sidebar
                    </button>
                    <button
                      class="toggle-button"
                      @click="chosenGenres.push(similarGenre.name)"
                      v-if="!(chosenGenres.includes(similarGenre.name))">
                      + add
                    </button>
                    <button class="toggle-button" v-else @click="chosenGenres = chosenGenres.filter(g => g !== similarGenre.name)">
                      Ã— remove
                    </button>
                  </li>
                </ul>
              </div>
            </li>
          </ul>
          <button v-if="showingMoreGenres === false" @click="showingMoreGenres = true">
            Show more top genres
          </button>
        </div>
        <h3>Chosen genres</h3>
        <div v-if="chosenGenres.length > 0">
          <ul>
            <li v-for="genre in chosenGenres">
              ${genre}
              <button @click="chosenGenres = chosenGenres.filter(g => g !== genre)">
                Ã— remove
              </button>
            </li>
          </ul>
          <h4>Find similar genres to your chosen ones</h4>
          <button @click="getSimilarForChosen">Get similar genres</button>
          <div v-if="similarGenresToChosen.length > 0">
            <ul class="genres">
              <li v-for="genre in similarGenresToChosen" :class="{chosen: chosenGenres.includes(genre.name)}">
                <span class="genre-name">${genre.name}</span>
                <!-- artist count should go here -->
                <button v-if="!(genre.name in similarGenres)" @click="getSimilarGenres(genre.name)">
                  <span v-if="fetchingFor.includes(genre.name)">
                    finding similar...
                  </span>
                  <span v-else>ðŸŒŽ explore similar</span>
                </button>
                <button v-else @click="hideSimilarGenres(genre.name)">
                  Ã— hide similar
                </button>
                <button class="toggle-button" @click="chosenGenres.push(genre.name)" v-if="!(chosenGenres.includes(genre.name))">
                  + add
                </button>
                <button class="toggle-button" v-else @click="chosenGenres = chosenGenres.filter(g => g !== genre.name)">
                  Ã— remove
                </button>
                <button @click="previewPlaylist(genre.soundPlaylistId)">
                  ðŸ”Ž view in sidebar
                </button>
                <div class="similar-container" v-if="genre.name in similarGenres">
                  <h4>similar to ${genre.name}</h4>
                  <ul>
                    <li v-for="similarGenre in similarGenres[genre.name]" :class="{chosen: chosenGenres.includes(similarGenre.name)}">
                      <span class="genre-name">
                        ${similarGenre.name}
                      </span>
                      <span
                        class="artist-count"
                        v-if="topGenres.find(g => g.name === similarGenre.name)"
                        :title="`${topGenres.find(g => g.name === similarGenre.name).count} of your top artists`">
                        ${topGenres.find(g => g.name === similarGenre.name).count}Ã—</span>
                      <button @click="previewPlaylist(similarGenre.soundPlaylistId)">
                        view in sidebar
                      </button>
                      <button
                        class="toggle-button"
                        @click="chosenGenres.push(similarGenre.name)"
                        v-if="!(chosenGenres.includes(similarGenre.name))">
                        + add
                      </button>
                      <button class="toggle-button" v-else @click="chosenGenres = chosenGenres.filter(g => g !== similarGenre.name)">
                        Ã— remove
                      </button>
                    </li>
                  </ul>
                </div>
              </li>
            </ul>
          </div>
        </div>
        <p v-else>
          You haven't chosen any genres yet. Check out your top genres and explore similar genres above.
        </p>
        <h2>2. Choose which playlists you want</h2>
        <p>
          Tick the checkbox on the types of playlists you want to include in your
                  playlist.
        </p>
        <div class="playlist-types">
          <label
            v-for="(playlistType, index) in playlistTypes"
            :class="{chosen: chosenPlaylistTypes.includes(playlistType.name)}">
            <input
              type="checkbox"
              @change="togglePlaylistType(playlistType.name)"
              :checked="chosenPlaylistTypes.includes(playlistType.name)"/>
            <p>
              <strong>${playlistType.name}</strong>
            </p>
            <p>${playlistType.description}</p>
          </label>
        </div>
        <button @click="getPlaylistsToInclude" v-if="chosenGenres.length > 0">
          Check which playlists will be included
        </button>
        <div v-if="playlistsToInclude.length > 0">
          <p>Your playlist will include...</p>
          <ul>
            <li v-for="playlist in playlistsToInclude">
              <a target="_blank" :href="`spotify:playlist:${playlist.playlistId}`">${playlist.name} (${playlist.numTracks} tracks)</a>
              <button @click="previewPlaylist(playlist.playlistId)">
                view in sidebar
              </button>
            </li>
          </ul>
        </div>
        <h2>3. Create your playlist</h2>
        <p>
          Give your playlist a name and hit 'Create playlist'. This will create a new playlist in your Spotify
          account.
        </p>
        <form method="POST" id="playlist-form" action="/create-playlist" @submit.prevent="createPlaylist">
          <label>Playlist name <input type="text" name="name"/>
          </label>
          <input v-for="genre in chosenGenres" type="hidden" name="genre" :value="genre"/>
          <input v-for="playlistType in chosenPlaylistTypes" type="hidden" name="playlist-type" :value="playlistType"/>
          <button>
            <span v-if="!creatingPlaylist">Create playlist</span>
            <span v-else>Creating playlist...</span>
          </button>
          <div v-if="createdPlaylist">
            <div v-if="'url' in createdPlaylist">
              <p>
                Playlist created!
                <a :href="createdPlaylist.url">View on Spotify</a>
              </p>
            </div>
            <div v-if="createdPlaylist.status == 'error'">
              <p>Error while creating playlist:</p>
              <pre>${JSON.stringify(createdPlaylist)}</pre>
            </div>
          </div>
        </form>
      </div>
      <div v-if="!authError" class="sidebar">
        <h2>Playlist viewer</h2>
        <div v-if="previewPlaylistId !== null">
          <iframe
            :src="`https://embed.spotify.com/?uri=spotify:playlist:${previewPlaylistId}`"
            style="width: 100%; height: 600px"></iframe>
        </div>
        <p v-else>Click 'view in sidebar' on a genre to see it over here.</p>
      </div>
    </body>
  </body>
</html></div><script type="module">
async function fetchTopGenres() {
  const genres = await fetch("/top-genres").then((r) => r.json());
  if (genres.error) {
    window.location.href = "/?message=expired";
    return;
  }
  this.topGenres = genres;
}
async function createPlaylist() {
  const playlistForm = document.getElementById("playlist-form");
  const formData = new FormData(playlistForm);
  this.creatingPlaylist = true;
  const createResponse = await fetch(playlistForm.getAttribute("action"), {
    method: "POST",
    body: formData
  }).then((r) => r.json());
  if (createResponse.error) { // handle error
  }
  this.createdPlaylist = createResponse;
  this.creatingPlaylist = false;
}
function hideSimilarGenres(genre) {
  console.log("should be deleting", genre);
  delete this.similarGenres[genre];
  console.log(this.similarGenres);
}
async function getSimilarGenres(genre) {
  this.fetchingFor = [
    ...this.fetchingFor,
    genre
  ];
  console.log("should be getting similar genres for", genre);
  const enaoUrl = `/similar-genres/${genre}`;
  console.log({enaoUrl});
  const similarGenresJson = await fetch(enaoUrl).then((r) => r.json());
  console.log({similarGenresJson});
  this.similarGenres[genre] = similarGenresJson.genres;
  console.log("removing from fetching for");
  this.fetchingFor = this.fetchingFor.filter((str) => str !== genre);
}
async function getSimilarForChosen() {
  const searchParams = new URLSearchParams();
  this.chosenGenres.forEach((genre) => {
    searchParams.append("genre", genre);
  });
  const enaoUrl = `/similar-genres/${
    this.chosenGenres.join('/')
  }`;
  const similarGenresJson = await fetch(enaoUrl).then((r) => r.json());
  console.log({similarGenresJson});
  this.similarGenresToChosen = similarGenresJson.genres;
}
async function getPlaylistsToInclude() {
  const form = document.getElementById("playlist-form");
  const formData = new FormData(form);
  const playlistsToInclude = await fetch(`/list-playlists-to-include`, {
    body: formData,
    method: "POST"
  }).then((r) => r.json());
  this.playlistsToInclude = playlistsToInclude;
}
async function getArtistsForGenre(genre) {
  const enaoUrl = `/artists-for-genre?genre=${genre}`;
  console.log({enaoUrl});
  const exampleArtists = await fetch(enaoUrl).then((r) => r.json());
  this.artistsForGenre[genre] = exampleArtists;
  console.log(this.artistsForGenre);
}
async function getChosenPlaylistIds() {
  const genreNames = this.chosenGenres;
  const chosenPlaylistTypes = this.chosenPlaylistTypes;
  async function getPlaylistsForGenre(genreName, types) {
    const playlists = await fetch(`/playlist-find-pulse-edge?genre=${genreName}`).then((r) => r.json());
    console.log(playlists);
    return playlists.filter((p) => types.includes(p.label));
  }
  const playlistIdArrays = await Promise.all(genreNames.map((genreName) => getPlaylistsForGenre(genreName, chosenPlaylistTypes)));
  this.chosenPlaylistIds = playlistIdArrays.flat().map((p) => p.id);
}
async function togglePlaylistType(type) {
  if (this.chosenPlaylistTypes.includes(type)) {
    this.chosenPlaylistTypes = this.chosenPlaylistTypes.filter((t) => t !== type);
  } else {
    this.chosenPlaylistTypes.push(type);
  }
}
async function previewPlaylist(playlistId) {
  this.previewPlaylistId = playlistId;
}
async function checkAuthThenGetTopGenres() {
  const authResponse = await fetch("/auth-check").then((r) => r.json());
  console.log({authResponse})
  if (authResponse.status === "error") { // show the error message
    if (authResponse.error.status === 401) {
      window.location.href = "/?message=expired"
      return;
    }
    this.authError = authResponse.error;
    return;
  } else {
    this.authError = false;
    this.fetchTopGenres()
  }
}
import {createApp} from "/petite-vue.es.js";
createApp({
  authError: null,
  fetchingFor: [],
  topGenres: [],
  showingMoreGenres: false,
  similarGenres: {},
  getSimilarGenres,
  hideSimilarGenres,
  similarGenresToChosen: [],
  getSimilarForChosen,
  artistsForGenre: {},
  getArtistsForGenre,
  playlistsToInclude: [],
  previewPlaylist,
  previewPlaylistId: null,
  getPlaylistsToInclude,
  createPlaylist,
  creatingPlaylist: false,
  createdPlaylist: null,
  get genresToShow() {
    if (this.showingMoreGenres) {
      return this.topGenres;
    } else {
      return this.topGenres.slice(0, 10);
    }
  },
  chosenGenres: [],
  checkAuthThenGetTopGenres,
  fetchTopGenres,
  chosenPlaylistTypes: ["Sound"],
  togglePlaylistType,
  getChosenPlaylistIds,
  chosenPlaylistIds: [],
  get playlistIdsString() {
    return this.chosenPlaylistIds.join("\n");
  },
  playlistTypes: [
    {
      name: "Sound",
      description: "Songs new and old that define the genre"
    },
    {
      name: "Intro",
      description: "An attempt at an algorithmic introduction to the genre"
    },
    {
      name: "Pulse",
      description: "What fans of the genre are listening to now"
    },
    {
      name: "Edge",
      description: "Recently released music that fans of the genre are checking out"
    }, {
      name: "â™€Filter",
      description: "An algorithmic attempt to find music in the genre made wholly or partly by women"
    }, {
      name: "2022",
      description: "Music from the genre that came out in 2022"
    }
  ],
  $delimiters: ["${", "}"]
}).mount();</script></body></html></body></html>