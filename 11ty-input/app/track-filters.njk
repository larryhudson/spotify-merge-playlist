---
title: Add filters
backLinkText: Back to creating playlist
backLinkUrl: /app/3-create/
---

<p>Here you can add filters to fine tune your playlist.</p>
<div x-data="filters" x-init="loadChosenFilters()">
    <details style="border: 2px solid var(--border-color); padding: 1rem; border-radius: 10px;">
        <summary>
            <strong>About the filters</strong>
        </summary>
        <div>
            <p>Here's some information about the filters from Spotify:</p>
            <ul class="bullets">
                <li>
                    <strong>danceability</strong>
                    &ndash; Danceability describes how suitable a track is for dancing based on a combination of musical elements including
                    tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most
                    danceable.
                </li>
                <li>
                    <strong>energy</strong>
                    &ndash; Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically,
                    energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low
                    on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre,
                    onset rate, and general entropy.
                </li>
                <li>
                    <strong>tempo</strong>
                    &ndash; The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or
                    pace of a given piece and derives directly from the average beat duration.
                </li>
                <li>
                    <strong>valence</strong>
                    &ndash; A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence
                    sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad,
                    depressed, angry).
                </li>
            </ul>
        </div>
    </details>
    <template x-if="chosenFilters.length > 0">
        <div>
            <h3>Chosen filters</h3>
            <ul>
                <template x-for="(filter, filterIndex) in chosenFilters">
                    <li>
                        <span x-text="filter.filterType"></span>
                        is
                        <span x-text="filter.condition"></span>
                        <span x-text="filter.value"></span>
                        <button @click="removeFilter(filterIndex)">remove</button>
                    </li>
                </template>
            </ul>
        </div>
    </template>
    <h3>Add a filter</h3>
    <form @submit.prevent="addFilter">
        <p>I want the
            <div class="select-container">
                <select style="margin-left: 0.5rem" x-model="filterType">
                    <option value="danceability">danceability</option>
                    <option value="energy">energy</option>
                    <option value="tempo">tempo</option>
                    <option value="valence">valence</option>
                </select>
            </div>
        </p>
        <p>to be
            <div class="select-container">
                <select style="margin-left: 0.5rem" x-model="condition">
                    <option value="more than">more than</option>
                    <option value="less than">less than</option>
                </select>
            </div>
        </p>
        <p style="display: flex; align-items: center;">
            <input
                type="range"
                x-model="chosenValue"
                :max="filterType === 'tempo' ? '500' : '0.95'"
                :step="filterType === 'tempo' ? '10' : '0.025'"
                :min="filterType === 'tempo' ? '60' : '0.1'"
                style="font-size: 1.25rem"/>
            <span x-text="chosenValue" style="margin-left: 1rem; font-size: 1.25rem;"></span>
        </p>
        <p>
            <div style="position: relative">
                <input
                    x-model="trackSearchInput"
                    @input.debounce="getSearchResults"
                    type="text"
                    :placeholder="`search to find ${filterType} of a song`"
                    style="width: 21rem; font-size: 1.125rem"/>
                <template x-if="trackSearchResults.length > 0">
                    <ul class="search-results-dropdown">
                        <template x-for="result in trackSearchResults">
                            <li>
                                <button :data-track-id="result.id" @click.prevent="setValueOfTrack(result)">
                                    <span x-text="result.name"></span>
                                    by
                                    <span x-text="result.artists"></span>
                                </button>
                            </li>
                        </template>
                    </ul>
                </template>
            </div>
        </div>
    </p>
    <button>Add filter</button>
</form></div><script type="module">
// This is going to mount its own Petite Vue thing
async function init() {}
async function getSearchResults() {
    const query = this.trackSearchInput;
    console.log("searching for", query)
    if (query === "" || query.length < 4) {
        this.trackSearchResults = [];
        return;
    }
    const searchParamsString = new URLSearchParams({type: 'track', q: query}).toString()
    const searchUrl = `/spotify-search?${searchParamsString}`
    const results = await fetch(searchUrl).then(r => r.json())
    console.log(results);
    this.trackSearchResults = results;
}
async function loadChosenFilters() {
    const chosenFiltersJson = localStorage.getItem('chosen-filters') || "[]";
    try {
        const chosenFilters = JSON.parse(chosenFiltersJson);
        this.chosenFilters = chosenFilters;
    } catch (err) {
        console.log(err)
        // TODO: show error message?
    }
}
async function removeFilter(filterIndex) {
    this.chosenFilters = this.chosenFilters.filter((f, index) => index !== filterIndex);
    updateFiltersInLocalStorage.bind(this)();
}
async function addFilter() {
    // fetch features for track
    const filterObj = {
        filterType: this.filterType,
        condition: this.condition,
        value: this.chosenValue,
        track: this.chosenTrack
    }
    console.log(filterObj);
    this.chosenFilters.push(filterObj);
    updateFiltersInLocalStorage.bind(this)()
}
async function updateFiltersInLocalStorage() {
    localStorage.setItem('chosen-filters', JSON.stringify(this.chosenFilters));
}
async function setValueOfTrack(track) {
    console.log("should set track")
    console.log(track.name);
    this.trackSearchInput = "";
    this.trackSearchResults = [];
    const features = await fetch(`/spotify-track-features?trackId=${
        track.id
    }`).then(r => r.json());
    console.log({features});
    const {filterType, condition} = this;
    const value = features[this.filterType];
    const roundedValue = this.filterType === "tempo"
        ? Number(value.toFixed(0))
        : Number(value.toFixed(3))
    this.chosenValue = roundedValue;
}
import Alpine from "/alpine.es.js";
document.addEventListener('alpine:init', () => {
    Alpine.data('filters', () => ({
        init() {
            loadChosenFilters.bind(this)()
        },
        filterType: "danceability",
        condition: "more than",
        chosenFilters: [],
        addFilter,
        removeFilter,
        loadChosenFilters,
        getSearchResults,
        trackSearchInput: "",
        trackSearchResults: [],
        chosenValue: 0.5,
        setValueOfTrack
    }))
})
Alpine.start()</script>