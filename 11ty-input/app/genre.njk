---
title: Genre
backLinkText: Back to your mix
backLinkUrl: /app/1-explore/
---

{% edge %}
<div id="genre-detail-app" @vue:mounted="init">
    <button
        class="button button-generous"
        @click="toggleGenre"
        :class="{'primary-highlight-obvious': isChoosing(genreName), 'primary-highlight-subtle': !isChoosing(genreName)}">
        <span v-if="isChoosing(genreName)">
            × remove
            <strong>${genreName}</strong>
            from your mix
        </span>
        <span v-else="">
            + add
            <strong>${genreName}</strong>
            to your mix
        </span>
    </button>
    <h3>Similar genres</h3>
    <ul class="pills">
        {% for similarGenre in genre.similarGenres %}
            <li style="display: inline-block">
                <a
                    class="pill-link button-secondary button"
                    :class="{'primary-highlight-subtle': isChoosing('{{ similarGenre.name }}')}"
                    href="/app/genre/?genre={{ similarGenre.name | urlencode }}">
                    {{ similarGenre.name }}</a>
            </li>
        {% endfor %}
    </ul>
    <div>
        <div style="margin-top: 3rem; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;">
            <h3 style="margin-top: 0">Explore what is in this genre</h3>
            <div class="select-container">
                <select style="display: inline-block" @change="updatePreviewPlaylist">
                    {% for playlist in genre.playlists %}
                        <option value="{{ playlist.id }}">{{ playlist.type }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>
        <p>Tap a song below to hear a preview.
            <a class="button button-secondary" target="_blank" :href="`https://open.spotify.com/playlist/${previewPlaylistId}`">View
                full playlist on Spotify &rarr;</a>
        </p>
        <div class="playing-track-container" v-if="playingTrack">
            <div class="playing-track">
                <div class="image-and-name">
                    <div>
                        <img :src="playingTrack.imageUrl"/>
                    </div>
                    <div>
                        <p>
                            <strong>${playingTrack.name}</strong>
                        </p>
                        <p>
                            <a v-for="artist in playingTrack.artists" style="margin-right: 0.5rem" :href="`/app/artist/?artistId=${artist.id}`">
                                ${artist.name}</a>
                        </p>
                    </div>
                </div>
                <div class="stop-button">
                    <button @click="stopPlaying">× Stop</button>
                </div>
                <audio @loadedMetadata="playAudio" id="preview-audio" :src="playingTrack.mp3Url"></audio>
            </div>
        </div>
        <div>
            <ul class="list-flex flex-wrap track-previews">
                <li v-for="track in previewTracks">
                    <button
                        :title="`${track.name} by ${track.artistStr}`"
                        class="track-preview-button"
                        @click="playTrack(track)"
                        :aria-pressed="playingTrack === track ? 'true' : undefined">
                        <img :src="track.imageUrl" :width="track.imageWidth" :height="track.imageWidth" alt=""/>
                    </button>
                </li>
            </ul>
        </div>
    </div>
    <h3>Artists for this genre</h3>
    {% if genre.artists.length > 5 %}
        <p v-if="artistsForGenre.length > 5">You can swipe to the right to see more artists.</p>
    {% endif %}
    <ul class="search-results search-results-small scroll-sideways">
        {% for artist in genre.artists %}
            <a href="/app/artist/?artistId={{ artist.id }}">
                <div>
                    {% set lastImage = artist.images | last %} <img src="{{ lastImage.url }}" alt=""/>
                </div>
                <div class="artist-name">
                    {{ artist.name }}
                </div>
            </a>
        {% endfor %}
    </ul>
</div>
<script type="module">
    // This is going to mount its own Petite Vue thing
    async function init() {
        loadChosenGenres.bind(this)();
        // getPlaylistsForGenre.bind(this)(); getSimilarGenres.bind(this)(); getArtistsForGenre.bind(this)();
    }
    async function updatePreviewPlaylist(event) {
        this.previewPlaylistId = event.target.value;
        this.getPlaylistTracks.bind(this)();
    }
    async function getPlaylistTracks() {
        const tracks = await fetch(`/spotify-playlist-tracks?playlistId=${
            this.previewPlaylistId
        }&limit=24`).then(r => r.json())
        this.previewTracks = tracks;
    }
    async function loadChosenGenres() {
        const chosenGenresJson = localStorage.getItem('chosen-genres') || "[]";
        try {
            const chosenGenres = JSON.parse(chosenGenresJson);
            this.chosenGenres = chosenGenres;
        } catch (err) {
            console.log(err)
            // TODO: show error message?
        }
    }
    async function updateChosenGenresInLocalStorage() {
        localStorage.setItem('chosen-genres', JSON.stringify(this.chosenGenres));
    }
    async function toggleGenre() {
        if (this.chosenGenres.includes(this.genreName)) {
            this.chosenGenres = this.chosenGenres.filter(genre => genre !== this.genreName);
        } else {
            this.chosenGenres.push(this.genreName);
        } updateChosenGenresInLocalStorage.bind(this)();
    }
    async function playTrack(track) {
        console.log("should play track", track)
        this.playingTrack = track;
    }
    async function playAudio(event) {
        console.log(event);
        event.target.play();
    }
    async function stopPlaying() {
        this.playingTrack = null;
    }
    import {createApp} from "/petite-vue.es.js";
    document.querySelector('h2').innerText = "{{ genre.name }}"
    createApp({
        chosenGenres: [],
        updatePreviewPlaylist,
        previewPlaylistId: "{{ genre.soundPlaylistId }}",
        previewTracks: {{ genre.soundPlaylistTracks | jsonToJs | safe }},
        getPlaylistTracks,
        playlistsForGenre: {{ genre.playlists | jsonToJs | safe }},
        similarGenres: {{ genre.similarGenres | jsonToJs | safe }},
        artistsForGenre: {{ genre.artists | jsonToJs | safe }},
        genreName: "{{ genre.name }}",
        init,
        toggleGenre,
        fetched: false,
        playingTrack: null,
        playTrack,
        playAudio,
        stopPlaying,
        isChoosing(genreName) {
            return this.chosenGenres.includes(genreName)
        },
        $delimiters: ["${", "}"]
    }).mount("#genre-detail-app")
</script>
{% endedge %}